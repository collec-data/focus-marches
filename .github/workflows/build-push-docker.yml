name: build-push-docker

on:
  workflow_call:
    inputs:
      image-name: # nom de l'image Ã  builder
        required: true
        type: string
      context: #context pour le build de l'image
        type: string
        required: true
      dockerfile: #chemin du dockerfile
        type: string
        required: true


env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io


permissions:
  contents: read


jobs:
  build-push-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ inputs.image-name }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0 # v3.0.0
      - name: Log to GHCR
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.0.0 # v5.0.0
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ inputs.image-name }}:buildcache
          cache-to:   type=registry,ref=${{ env.REGISTRY }}/${{ inputs.image-name }}:buildcache,mode=max

      - name: Scan for vulnerabilities
        if: github.event_name != 'pull_request'
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ env.REGISTRY }}/${{ inputs.image-name }}:${{github.ref_name}}
          dockerfile: ${{ inputs.dockerfile }}
          annotations: true
          severity: CRITICAL